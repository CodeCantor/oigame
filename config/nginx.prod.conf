upstream oigame_staging {
  server unix:/tmp/thin.staging.0.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.1.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.2.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.3.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.4.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.5.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.6.sock max_fails=1 fail_timeout=10s;
  server unix:/tmp/thin.staging.7.sock max_fails=1 fail_timeout=10s;
}


server {
       listen         80;
       server_name    beta.oiga.me;
       rewrite        ^ https://$server_name$request_uri? permanent;
}

server {
    # if you're running multiple servers, instead of "default" you should
    # put your main domain name here
    listen 443;

    # you could put a list of other domain names this application answers
    server_name beta.oiga.me;

    root /var/www/beta.oiga.me/current/public;
    access_log /var/log/nginx/beta.oiga.me.access.log;
    rewrite_log on;
	  
    #auth_basic "oiga.me Login";
    #auth_basic_user_file /etc/nginx/oigame-auth;
  
	  ssl on;
	  ssl_certificate /etc/nginx/ssl/oigame.crt;
	  ssl_certificate_key /etc/nginx/ssl/oigame.key;
	  ssl_session_timeout 5m;
	  ssl_protocols SSLv2 SSLv3 TLSv1;
	  ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;
	  ssl_prefer_server_ciphers on;

  client_max_body_size 10m;

    location / {
        #all requests are sent to the UNIX socket
        proxy_pass  http://oigame_staging;
        proxy_redirect     off;

	proxy_set_header X-FORWARDED-PROTO https;

        proxy_set_header   Host             $host;
        proxy_set_header   X-Real-IP        $remote_addr;
        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;

        client_max_body_size       10m;
        client_body_buffer_size    128k;

        proxy_connect_timeout      90;
        proxy_send_timeout         90;
        proxy_read_timeout         90;

        proxy_buffer_size          4k;
        proxy_buffers              4 32k;
        proxy_busy_buffers_size    64k;
        proxy_temp_file_write_size 64k;
    }

    # Página de mantenimiento para cap deploy:web:disable
    if (-f $document_root/system/maintenance.html) {
	rewrite ^(.*)$ /system/maintenance.html break;
    }

    # Las imágenes de las campañas
    #location /uploads/ {
    #    root /var/www/beta.oiga.me/current/public;
    #    expires max;
    #    break;
    #}

    location /favicon.ico {
	root /var/www/beta.oiga.me/current/public;
	expires max;
	break;
    }

    # El robots
    location /robots.txt {
	root /var/www/beta.oiga.me/current/public;
	expires max;
	break;
    }

    # Para el Sitemap
    location /sitemap1.xml.gz {
	root /var/www/beta.oiga.me/current/public;
	break;
    }
    
    location /sitemap_index.xml.gz {
	root /var/www/beta.oiga.me/current/public;
	break;
    }

    # if the request is for a static resource, nginx should serve it directly
    # and add a far future expires header to it, making the browser
    # cache the resource and navigate faster over the website
    # this probably needs some work with Rails 3.1's asset pipe_line
    #location ~ ^/(jpg|png|gif|js|system)/i  {
    #  #root /var/www/oiga.me/current/public;
    #  expires max;
    #  break;
    #}

  location ~ ^/(uploads|assets|images|javascripts|stylesheets|swfs|system)/ {
      root /var/www/beta.oiga.me/current/public;
      gzip_static on;
      expires     max;
      add_header  Cache-Control public;
      add_header  Last-Modified "";
      add_header  ETag "";
      break;
  }
}
